{"version":3,"file":"static/js/547.dde53c69.chunk.js","mappings":"gSACA,EAAuB,+BAAvB,EAA8D,gC,mBCO/C,SAASA,IACtB,OAMIC,EAAAA,EAAAA,MALFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MACAC,EALF,EAKEA,MAEF,GAAiBC,EAAAA,EAAAA,MAAVC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,QAAO,CAAC,GACzBD,EAASE,QAAUR,EAAM,WAAY,IACrC,IAAMS,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,mCAAG,wGAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAOP,EAAtB,EAAsBA,SAAtB,SAGLH,EAAO,CAAES,KAAAA,EAAMC,MAAAA,EAAOP,SAAAA,IAHjB,2BAEbQ,KAAQC,EAFK,EAELA,KAAMC,EAFD,EAECA,MAFD,SAITZ,GAASa,EAAAA,EAAAA,IAAO,CAAEF,KAAAA,EAAMC,MAAAA,KAJf,OAKfP,EAAS,aACTR,IANe,4CAAH,sDASd,OACE,kBACEiB,UAAWC,EACXR,SAAU,SAAAS,GAAC,OAAIA,EAAEC,gBAAN,EACXC,aAAa,MAHf,WAKE,sCAEE,4BACM1B,EAAS,OAAQ,CACnB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MAAO,iCACPC,QAAS,wDAId3B,EAAOc,OAAQ,cAAGM,UAAWC,EAAd,SAA6BrB,EAAOc,KAAKa,cAG3D,uCAEE,4BACM7B,EAAS,QAAS,CACpB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MACE,wEACFC,QAAS,gCAId3B,EAAOe,QAAS,cAAGK,UAAWC,EAAd,SAA6BrB,EAAOe,MAAMY,cAG7D,0CAEE,0BACEE,KAAK,YACD/B,EAAS,WAAY,CACvB2B,SAAU,yBACVK,UAAW,CACTJ,MAAO,EACPC,QAAS,0CAEXI,UAAW,CACTL,MAAO,GACPC,QAAS,0CAEXC,QAAS,CACPF,MAAO,2CACPC,QACE,wFAIP3B,EAAOQ,WACN,cAAGY,UAAWC,EAAd,SAA6BrB,EAAOQ,SAASmB,cAGjD,kDAEE,0BACEE,KAAK,YACD/B,EAAS,mBAAoB,CAC/B2B,SAAU,yBACVO,SAAU,SAAAN,GAAK,OACbA,IAAUlB,EAASE,SAAW,4BADjB,MAIlBV,EAAOiC,mBACN,cAAGb,UAAWC,EAAd,SAA6BrB,EAAOiC,iBAAiBN,cAIzD,mBAAQE,KAAK,SAASK,QAASnC,EAAac,GAA5C,sBAKL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/RegistrationForm/index.module.scss?7432","pages/RegistrationForm/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegistrationForm_form__zpofU\",\"error\":\"RegistrationForm_error__0WkNn\"};","import { useForm } from 'react-hook-form';\nimport { useRef } from 'react';\nimport { useSignupMutation } from 'services/auth';\nimport { useDispatch } from 'react-redux';\nimport { signIn } from 'redux/authSlice';\nimport styles from './index.module.scss';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function AuthForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    reset,\n  } = useForm();\n  const [signup] = useSignupMutation();\n  const dispatch = useDispatch();\n\n  const password = useRef({});\n  password.current = watch('password', '');\n  const navigate = useNavigate();\n\n  const onSubmit = async ({ name, email, password }) => {\n    const {\n      data: { user, token },\n    } = await signup({ name, email, password });\n    await dispatch(signIn({ user, token }));\n    navigate('/contacts');\n    reset();\n  };\n\n  return (\n    <form\n      className={styles.form}\n      onSubmit={e => e.preventDefault()}\n      autoComplete=\"off\"\n    >\n      <label>\n        Name*\n        <input\n          {...register('name', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value: /^([a-zA-Z]{2,}\\s?[a-zA-Z]{1,})/,\n              message: 'Name should contain only Latin letters and space',\n            },\n          })}\n        />\n        {errors.name && <p className={styles.error}>{errors.name.message}</p>}\n      </label>\n\n      <label>\n        Email*\n        <input\n          {...register('email', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value:\n                /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n              message: 'Please enter valid email',\n            },\n          })}\n        />\n        {errors.email && <p className={styles.error}>{errors.email.message}</p>}\n      </label>\n\n      <label>\n        Password*\n        <input\n          type=\"password\"\n          {...register('password', {\n            required: 'This field is required',\n            minLength: {\n              value: 7,\n              message: 'Password must be at least 7 characters',\n            },\n            maxLength: {\n              value: 12,\n              message: 'Password must be at most 12 characters',\n            },\n            pattern: {\n              value: /^(?=.*d)(?=.*[a-z])(?=.*[A-Z])(?!.*s).*$/,\n              message:\n                'Password must contain at least one digit, one lowercase and one uppercase letter',\n            },\n          })}\n        />\n        {errors.password && (\n          <p className={styles.error}>{errors.password.message}</p>\n        )}\n      </label>\n      <label>\n        Confirm password*\n        <input\n          type=\"password\"\n          {...register('password_confirm', {\n            required: 'This field is required',\n            validate: value =>\n              value === password.current || 'The passwords do not match',\n          })}\n        />\n        {errors.password_confirm && (\n          <p className={styles.error}>{errors.password_confirm.message}</p>\n        )}\n      </label>\n\n      <button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n        Submit\n      </button>\n    </form>\n  );\n}\n"],"names":["AuthForm","useForm","register","handleSubmit","errors","formState","watch","reset","useSignupMutation","signup","dispatch","useDispatch","password","useRef","current","navigate","useNavigate","onSubmit","name","email","data","user","token","signIn","className","styles","e","preventDefault","autoComplete","required","value","message","pattern","type","minLength","maxLength","validate","password_confirm","onClick"],"sourceRoot":""}