{"version":3,"file":"static/js/609.ab3f5237.chunk.js","mappings":"gSACA,EAAwB,sBAAxB,EAAsD,sB,SCKzCA,EAAS,WACpB,IAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAWC,EAAAA,EAAAA,MAEXC,ECSK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,CDzByBQ,GAExB,OACE,iCACE,kBAAOC,UAAWC,EAAcC,QAASb,EAAzC,oCAGA,kBACEW,UAAWC,EACXE,MAAOnB,EACPoB,SAAU,SAAAC,GAAC,OAAIlB,GAASmB,EAAAA,EAAAA,GAAUD,EAAEE,OAAOJ,OAAhC,EACXZ,GAAIF,MAIX,E,oBExBD,EAAwB,wBAAxB,EAAyD,yBAAzD,EAA8F,4BAA9F,EAA2I,iCAA3I,EAAwL,4BCQzK,SAASmB,IACtB,OAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MACHC,GAAaC,EAAAA,EAAAA,MAAnBC,MAERC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,oGACcJ,EADd,aAEG,QADXK,EADQ,cAEG,IAAbA,OAAA,EAAAA,EAAeC,QAAS,GAFd,uBAGZT,GAAc,GAHF,0BAMdA,GAAc,GANA,2CAAH,qDAQbO,GACD,GAAE,CAACJ,EAAUJ,IAcd,OACE,4BACE,eAAIV,UAAWC,EAAf,2BACA,iBAAKD,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,mBAAQD,UAAWC,EAAeoB,QAAS,SAAAhB,GAAC,OAjBhC,SAAAA,GAGlB,GAFYiB,OAAOC,SAASC,KAEpBC,SAAS,QAGf,OAFAb,EAAS,kBACTP,EAAEE,OAAOmB,YAAc,mBAGzBd,EAAS,iBACTP,EAAEE,OAAOmB,YAAc,WACxB,CAOuDC,CAAYtB,EAAhB,EAA5C,8BAGA,SAAC,EAAAuB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAQC,MAAM,YAAlC,UACE,SAAC,KAAD,OAEF,SAAChD,EAAD,QAEF,gBAAKiB,UAAWC,EAAhB,SACGS,GACC,SAAC,EAAAkB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAQC,MAAM,YAAlC,UACE,SAAC,KAAD,OAGF,yDAMX,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Filter/index.module.scss?2de2","components/Filter/index.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/pages/Contacts/index.module.scss?22c8","pages/Contacts/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__Jqkij\",\"label\":\"Filter_label__tMqGB\"};","import { setFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport styles from './index.module.scss';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const inputIdGenerate = nanoid();\n\n  return (\n    <>\n      <label className={styles.label} htmlFor={inputIdGenerate}>\n        Find contacts by name\n      </label>\n      <input\n        className={styles.input}\n        value={filter}\n        onChange={e => dispatch(setFilter(e.target.value))}\n        id={inputIdGenerate}\n      />\n    </>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Contacts_title__+FHoM\",\"addBtn\":\"Contacts_addBtn__EIL7H\",\"container\":\"Contacts_container__-yWq9\",\"innerContainer\":\"Contacts_innerContainer__PBEHA\",\"listPlace\":\"Contacts_listPlace__x58e3\"};","import { Outlet, useNavigate } from 'react-router-dom';\r\nimport { Pulsar } from '@uiball/loaders';\r\nimport { ContactsList } from 'helpers/lazyRoutes';\r\nimport { Filter } from 'components/Filter';\r\nimport { Suspense } from 'react';\r\nimport { useGetContactsQuery } from 'services/contacts';\r\nimport styles from './index.module.scss';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function Contacts() {\r\n  const [isContacts, setIsContacts] = useState(false);\r\n  const navigate = useNavigate();\r\n  const { data: contacts } = useGetContactsQuery();\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const contactsCount = await contacts;\r\n      if (contactsCount?.length > 0) {\r\n        setIsContacts(true);\r\n        return;\r\n      }\r\n      setIsContacts(false);\r\n    };\r\n    getData();\r\n  }, [contacts, isContacts]);\r\n\r\n  const handleClick = e => {\r\n    const url = window.location.href;\r\n\r\n    if (url.endsWith('/add')) {\r\n      navigate('/contacts');\r\n      e.target.textContent = 'ADD NEW CONTACT';\r\n      return;\r\n    }\r\n    navigate('/contacts/add');\r\n    e.target.textContent = 'HIDE FORM';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className={styles.title}>Contact Book</h2>\r\n      <div className={styles.container}>\r\n        <div className={styles.innerContainer}>\r\n          <button className={styles.addBtn} onClick={e => handleClick(e)}>\r\n            ADD NEW CONTACT\r\n          </button>\r\n          <Suspense fallback={<Pulsar color=\"#5c6386\" />}>\r\n            <Outlet />\r\n          </Suspense>\r\n          <Filter />\r\n        </div>\r\n        <div className={styles.listPlace}>\r\n          {isContacts ? (\r\n            <Suspense fallback={<Pulsar color=\"#5c6386\" />}>\r\n              <ContactsList />\r\n            </Suspense>\r\n          ) : (\r\n            <p>Add your first contact</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Filter","filter","useSelector","getFilter","dispatch","useDispatch","inputIdGenerate","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","className","styles","htmlFor","value","onChange","e","setFilter","target","Contacts","useState","isContacts","setIsContacts","navigate","useNavigate","contacts","useGetContactsQuery","data","useEffect","getData","contactsCount","length","onClick","window","location","href","endsWith","textContent","handleClick","Suspense","fallback","Pulsar","color"],"sourceRoot":""}