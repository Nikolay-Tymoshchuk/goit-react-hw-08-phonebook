{"version":3,"file":"static/js/166.0df4a07c.chunk.js","mappings":"uUASe,SAASA,IACtB,OAMIC,EAAAA,EAAAA,MALFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MACAC,EALF,EAKEA,MAEF,GAAgCC,EAAAA,EAAAA,MAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAAiBA,UACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,QAAO,CAAC,GACzBD,EAASE,QAAUT,EAAM,WAAY,IACrC,IAAMU,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,mCAAG,wGAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAOP,EAAtB,EAAsBA,SAAtB,kBAIHJ,EAAO,CAAEU,KAAAA,EAAMC,MAAAA,EAAOP,SAAAA,IAJnB,2BAGXQ,KAAQC,EAHG,EAGHA,KAAMC,EAHH,EAGGA,MAHH,UAKPZ,GAASa,EAAAA,EAAAA,IAAO,CAAEF,KAAAA,EAAMC,MAAAA,KALjB,QAMbhB,IACAS,EAAS,aAPI,kDASbS,EAAAA,GAAAA,MAAY,4DATC,0DAAH,sDAad,OACE,kBAAMP,SAAU,SAAAQ,GAAC,OAAIA,EAAEC,gBAAN,EAAwBC,aAAa,MAAtD,WACE,sCAEE,4BACM1B,EAAS,OAAQ,CACnB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MAAO,iCACPC,QAAS,wDAId3B,EAAOe,OAAQ,cAAGc,UAAU,QAAb,SAAsB7B,EAAOe,KAAKY,cAGpD,uCAEE,4BACM7B,EAAS,QAAS,CACpB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MACE,wEACFC,QAAS,gCAId3B,EAAOgB,QAAS,cAAGa,UAAU,QAAb,SAAsB7B,EAAOgB,MAAMW,cAGtD,0CAEE,0BACEG,KAAK,YACDhC,EAAS,WAAY,CACvB2B,SAAU,yBACVM,UAAW,CACTL,MAAO,EACPC,QAAS,0CAEXK,UAAW,CACTN,MAAO,GACPC,QAAS,0CAEXC,QAAS,CACPF,MAAO,0DACPC,QACE,wFAIP3B,EAAOS,WAAY,cAAGoB,UAAU,QAAb,SAAsB7B,EAAOS,SAASkB,cAE5D,kDAEE,0BACEG,KAAK,YACDhC,EAAS,mBAAoB,CAC/B2B,SAAU,yBACVQ,SAAU,SAAAP,GAAK,OACbA,IAAUjB,EAASE,SAAW,4BADjB,MAIlBX,EAAOkC,mBACN,cAAGL,UAAU,QAAb,SAAsB7B,EAAOkC,iBAAiBP,aAGjDrB,IAAa,SAAC,IAAD,CAAQ6B,MAAM,aAC5B,oBAAQL,KAAK,SAASM,QAASrC,EAAae,GAA5C,WACE,sCACA,sBAIP,C","sources":["pages/RegistrationForm/index.js"],"sourcesContent":["import { useForm } from 'react-hook-form';\r\nimport { useRef } from 'react';\r\nimport { useSignupMutation } from 'services/auth';\r\nimport { useDispatch } from 'react-redux';\r\nimport { signIn } from 'redux/authSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { Pulsar } from '@uiball/loaders';\r\n\r\nexport default function AuthForm() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    watch,\r\n    reset,\r\n  } = useForm();\r\n  const [signup, { isLoading }] = useSignupMutation();\r\n  const dispatch = useDispatch();\r\n\r\n  const password = useRef({});\r\n  password.current = watch('password', '');\r\n  const navigate = useNavigate();\r\n\r\n  const onSubmit = async ({ name, email, password }) => {\r\n    try {\r\n      const {\r\n        data: { user, token },\r\n      } = await signup({ name, email, password });\r\n      await dispatch(signIn({ user, token }));\r\n      reset();\r\n      navigate('/contacts');\r\n    } catch {\r\n      toast.error('Something went wrong. Maybe this email is already in use');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={e => e.preventDefault()} autoComplete=\"off\">\r\n      <label>\r\n        Name*\r\n        <input\r\n          {...register('name', {\r\n            required: {\r\n              value: true,\r\n              message: 'This field is required',\r\n            },\r\n            pattern: {\r\n              value: /^([a-zA-Z]{2,}\\s?[a-zA-Z]{1,})/,\r\n              message: 'Name should contain only Latin letters and space',\r\n            },\r\n          })}\r\n        />\r\n        {errors.name && <p className=\"error\">{errors.name.message}</p>}\r\n      </label>\r\n\r\n      <label>\r\n        Email*\r\n        <input\r\n          {...register('email', {\r\n            required: {\r\n              value: true,\r\n              message: 'This field is required',\r\n            },\r\n            pattern: {\r\n              value:\r\n                /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\r\n              message: 'Please enter valid email',\r\n            },\r\n          })}\r\n        />\r\n        {errors.email && <p className=\"error\">{errors.email.message}</p>}\r\n      </label>\r\n\r\n      <label>\r\n        Password*\r\n        <input\r\n          type=\"password\"\r\n          {...register('password', {\r\n            required: 'This field is required',\r\n            minLength: {\r\n              value: 7,\r\n              message: 'Password must be at least 7 characters',\r\n            },\r\n            maxLength: {\r\n              value: 12,\r\n              message: 'Password must be at most 12 characters',\r\n            },\r\n            pattern: {\r\n              value: /^((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/,\r\n              message:\r\n                'Password must contain at least one digit, one lowercase and one uppercase letter',\r\n            },\r\n          })}\r\n        />\r\n        {errors.password && <p className=\"error\">{errors.password.message}</p>}\r\n      </label>\r\n      <label>\r\n        Confirm password*\r\n        <input\r\n          type=\"password\"\r\n          {...register('password_confirm', {\r\n            required: 'This field is required',\r\n            validate: value =>\r\n              value === password.current || 'The passwords do not match',\r\n          })}\r\n        />\r\n        {errors.password_confirm && (\r\n          <p className=\"error\">{errors.password_confirm.message}</p>\r\n        )}\r\n      </label>\r\n      {isLoading && <Pulsar color=\"#5c6386\" />}\r\n      <button type=\"submit\" onClick={handleSubmit(onSubmit)}>\r\n        <span>Submit</span>\r\n        <i></i>\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n"],"names":["AuthForm","useForm","register","handleSubmit","errors","formState","watch","reset","useSignupMutation","signup","isLoading","dispatch","useDispatch","password","useRef","current","navigate","useNavigate","onSubmit","name","email","data","user","token","signIn","toast","e","preventDefault","autoComplete","required","value","message","pattern","className","type","minLength","maxLength","validate","password_confirm","color","onClick"],"sourceRoot":""}