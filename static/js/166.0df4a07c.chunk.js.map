{"version":3,"file":"static/js/166.0df4a07c.chunk.js","mappings":"uUASe,SAASA,IACtB,OAMIC,EAAAA,EAAAA,MALFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MACAC,EALF,EAKEA,MAEF,GAAgCC,EAAAA,EAAAA,MAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAAiBA,UACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,QAAO,CAAC,GACzBD,EAASE,QAAUT,EAAM,WAAY,IACrC,IAAMU,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,mCAAG,wGAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAOP,EAAtB,EAAsBA,SAAtB,kBAIHJ,EAAO,CAAEU,KAAAA,EAAMC,MAAAA,EAAOP,SAAAA,IAJnB,2BAGXQ,KAAQC,EAHG,EAGHA,KAAMC,EAHH,EAGGA,MAHH,UAKPZ,GAASa,EAAAA,EAAAA,IAAO,CAAEF,KAAAA,EAAMC,MAAAA,KALjB,QAMbhB,IACAS,EAAS,aAPI,kDASbS,EAAAA,GAAAA,MAAY,4DATC,0DAAH,sDAad,OACE,kBAAMP,SAAU,SAAAQ,GAAC,OAAIA,EAAEC,gBAAN,EAAwBC,aAAa,MAAtD,WACE,sCAEE,4BACM1B,EAAS,OAAQ,CACnB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MAAO,iCACPC,QAAS,wDAId3B,EAAOe,OAAQ,cAAGc,UAAU,QAAb,SAAsB7B,EAAOe,KAAKY,cAGpD,uCAEE,4BACM7B,EAAS,QAAS,CACpB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MACE,wEACFC,QAAS,gCAId3B,EAAOgB,QAAS,cAAGa,UAAU,QAAb,SAAsB7B,EAAOgB,MAAMW,cAGtD,0CAEE,0BACEG,KAAK,YACDhC,EAAS,WAAY,CACvB2B,SAAU,yBACVM,UAAW,CACTL,MAAO,EACPC,QAAS,0CAEXK,UAAW,CACTN,MAAO,GACPC,QAAS,0CAEXC,QAAS,CACPF,MAAO,0DACPC,QACE,wFAIP3B,EAAOS,WAAY,cAAGoB,UAAU,QAAb,SAAsB7B,EAAOS,SAASkB,cAE5D,kDAEE,0BACEG,KAAK,YACDhC,EAAS,mBAAoB,CAC/B2B,SAAU,yBACVQ,SAAU,SAAAP,GAAK,OACbA,IAAUjB,EAASE,SAAW,4BADjB,MAIlBX,EAAOkC,mBACN,cAAGL,UAAU,QAAb,SAAsB7B,EAAOkC,iBAAiBP,aAGjDrB,IAAa,SAAC,IAAD,CAAQ6B,MAAM,aAC5B,oBAAQL,KAAK,SAASM,QAASrC,EAAae,GAA5C,WACE,sCACA,sBAIP,C","sources":["pages/RegistrationForm/index.js"],"sourcesContent":["import { useForm } from 'react-hook-form';\nimport { useRef } from 'react';\nimport { useSignupMutation } from 'services/auth';\nimport { useDispatch } from 'react-redux';\nimport { signIn } from 'redux/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Pulsar } from '@uiball/loaders';\n\nexport default function AuthForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    reset,\n  } = useForm();\n  const [signup, { isLoading }] = useSignupMutation();\n  const dispatch = useDispatch();\n\n  const password = useRef({});\n  password.current = watch('password', '');\n  const navigate = useNavigate();\n\n  const onSubmit = async ({ name, email, password }) => {\n    try {\n      const {\n        data: { user, token },\n      } = await signup({ name, email, password });\n      await dispatch(signIn({ user, token }));\n      reset();\n      navigate('/contacts');\n    } catch {\n      toast.error('Something went wrong. Maybe this email is already in use');\n    }\n  };\n\n  return (\n    <form onSubmit={e => e.preventDefault()} autoComplete=\"off\">\n      <label>\n        Name*\n        <input\n          {...register('name', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value: /^([a-zA-Z]{2,}\\s?[a-zA-Z]{1,})/,\n              message: 'Name should contain only Latin letters and space',\n            },\n          })}\n        />\n        {errors.name && <p className=\"error\">{errors.name.message}</p>}\n      </label>\n\n      <label>\n        Email*\n        <input\n          {...register('email', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value:\n                /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n              message: 'Please enter valid email',\n            },\n          })}\n        />\n        {errors.email && <p className=\"error\">{errors.email.message}</p>}\n      </label>\n\n      <label>\n        Password*\n        <input\n          type=\"password\"\n          {...register('password', {\n            required: 'This field is required',\n            minLength: {\n              value: 7,\n              message: 'Password must be at least 7 characters',\n            },\n            maxLength: {\n              value: 12,\n              message: 'Password must be at most 12 characters',\n            },\n            pattern: {\n              value: /^((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/,\n              message:\n                'Password must contain at least one digit, one lowercase and one uppercase letter',\n            },\n          })}\n        />\n        {errors.password && <p className=\"error\">{errors.password.message}</p>}\n      </label>\n      <label>\n        Confirm password*\n        <input\n          type=\"password\"\n          {...register('password_confirm', {\n            required: 'This field is required',\n            validate: value =>\n              value === password.current || 'The passwords do not match',\n          })}\n        />\n        {errors.password_confirm && (\n          <p className=\"error\">{errors.password_confirm.message}</p>\n        )}\n      </label>\n      {isLoading && <Pulsar color=\"#5c6386\" />}\n      <button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n        <span>Submit</span>\n        <i></i>\n      </button>\n    </form>\n  );\n}\n"],"names":["AuthForm","useForm","register","handleSubmit","errors","formState","watch","reset","useSignupMutation","signup","isLoading","dispatch","useDispatch","password","useRef","current","navigate","useNavigate","onSubmit","name","email","data","user","token","signIn","toast","e","preventDefault","autoComplete","required","value","message","pattern","className","type","minLength","maxLength","validate","password_confirm","color","onClick"],"sourceRoot":""}