{"version":3,"file":"static/js/547.4c02a381.chunk.js","mappings":"gSACA,EAAuB,+BAAvB,EAA8D,gC,uCCS/C,SAASA,IACtB,OAMIC,EAAAA,EAAAA,MALFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MACAC,EALF,EAKEA,MAEF,GAAgCC,EAAAA,EAAAA,MAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAAiBA,UACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,QAAO,CAAC,GACzBD,EAASE,QAAUT,EAAM,WAAY,IACrC,IAAMU,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,mCAAG,wGAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAOP,EAAtB,EAAsBA,SAAtB,kBAIHJ,EAAO,CAAEU,KAAAA,EAAMC,MAAAA,EAAOP,SAAAA,IAJnB,2BAGXQ,KAAQC,EAHG,EAGHA,KAAMC,EAHH,EAGGA,MAHH,UAKPZ,GAASa,EAAAA,EAAAA,IAAO,CAAEF,KAAAA,EAAMC,MAAAA,KALjB,QAMbhB,IACAS,EAAS,aAPI,kDASbS,EAAAA,GAAAA,MAAY,4DATC,0DAAH,sDAad,OACE,kBACEC,UAAWC,EACXT,SAAU,SAAAU,GAAC,OAAIA,EAAEC,gBAAN,EACXC,aAAa,MAHf,WAKE,sCAEE,4BACM5B,EAAS,OAAQ,CACnB6B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MAAO,iCACPC,QAAS,wDAId7B,EAAOe,OAAQ,cAAGO,UAAWC,EAAd,SAA6BvB,EAAOe,KAAKc,cAG3D,uCAEE,4BACM/B,EAAS,QAAS,CACpB6B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MACE,wEACFC,QAAS,gCAId7B,EAAOgB,QAAS,cAAGM,UAAWC,EAAd,SAA6BvB,EAAOgB,MAAMa,cAG7D,0CAEE,0BACEE,KAAK,YACDjC,EAAS,WAAY,CACvB6B,SAAU,yBACVK,UAAW,CACTJ,MAAO,EACPC,QAAS,0CAEXI,UAAW,CACTL,MAAO,GACPC,QAAS,0CAEXC,QAAS,CACPF,MAAO,2CACPC,QACE,wFAIP7B,EAAOS,WACN,cAAGa,UAAWC,EAAd,SAA6BvB,EAAOS,SAASoB,cAGjD,kDAEE,0BACEE,KAAK,YACDjC,EAAS,mBAAoB,CAC/B6B,SAAU,yBACVO,SAAU,SAAAN,GAAK,OACbA,IAAUnB,EAASE,SAAW,4BADjB,MAIlBX,EAAOmC,mBACN,cAAGb,UAAWC,EAAd,SAA6BvB,EAAOmC,iBAAiBN,aAGxDvB,IAAa,SAAC8B,EAAA,EAAD,CAAQC,MAAM,aAC5B,oBAAQN,KAAK,SAASO,QAASvC,EAAae,GAA5C,WACE,sCACA,sBAIP,C","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/RegistrationForm/index.module.scss?7432","pages/RegistrationForm/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegistrationForm_form__zpofU\",\"error\":\"RegistrationForm_error__0WkNn\"};","import { useForm } from 'react-hook-form';\nimport { useRef } from 'react';\nimport { useSignupMutation } from 'services/auth';\nimport { useDispatch } from 'react-redux';\nimport { signIn } from 'redux/authSlice';\nimport styles from './index.module.scss';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Pulsar } from '@uiball/loaders';\n\nexport default function AuthForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    reset,\n  } = useForm();\n  const [signup, { isLoading }] = useSignupMutation();\n  const dispatch = useDispatch();\n\n  const password = useRef({});\n  password.current = watch('password', '');\n  const navigate = useNavigate();\n\n  const onSubmit = async ({ name, email, password }) => {\n    try {\n      const {\n        data: { user, token },\n      } = await signup({ name, email, password });\n      await dispatch(signIn({ user, token }));\n      reset();\n      navigate('/contacts');\n    } catch {\n      toast.error('Something went wrong. Maybe this email is already in use');\n    }\n  };\n\n  return (\n    <form\n      className={styles.form}\n      onSubmit={e => e.preventDefault()}\n      autoComplete=\"off\"\n    >\n      <label>\n        Name*\n        <input\n          {...register('name', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value: /^([a-zA-Z]{2,}\\s?[a-zA-Z]{1,})/,\n              message: 'Name should contain only Latin letters and space',\n            },\n          })}\n        />\n        {errors.name && <p className={styles.error}>{errors.name.message}</p>}\n      </label>\n\n      <label>\n        Email*\n        <input\n          {...register('email', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value:\n                /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n              message: 'Please enter valid email',\n            },\n          })}\n        />\n        {errors.email && <p className={styles.error}>{errors.email.message}</p>}\n      </label>\n\n      <label>\n        Password*\n        <input\n          type=\"password\"\n          {...register('password', {\n            required: 'This field is required',\n            minLength: {\n              value: 7,\n              message: 'Password must be at least 7 characters',\n            },\n            maxLength: {\n              value: 12,\n              message: 'Password must be at most 12 characters',\n            },\n            pattern: {\n              value: /^(?=.*d)(?=.*[a-z])(?=.*[A-Z])(?!.*s).*$/,\n              message:\n                'Password must contain at least one digit, one lowercase and one uppercase letter',\n            },\n          })}\n        />\n        {errors.password && (\n          <p className={styles.error}>{errors.password.message}</p>\n        )}\n      </label>\n      <label>\n        Confirm password*\n        <input\n          type=\"password\"\n          {...register('password_confirm', {\n            required: 'This field is required',\n            validate: value =>\n              value === password.current || 'The passwords do not match',\n          })}\n        />\n        {errors.password_confirm && (\n          <p className={styles.error}>{errors.password_confirm.message}</p>\n        )}\n      </label>\n      {isLoading && <Pulsar color=\"#5c6386\" />}\n      <button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n        <span>Submit</span>\n        <i></i>\n      </button>\n    </form>\n  );\n}\n"],"names":["AuthForm","useForm","register","handleSubmit","errors","formState","watch","reset","useSignupMutation","signup","isLoading","dispatch","useDispatch","password","useRef","current","navigate","useNavigate","onSubmit","name","email","data","user","token","signIn","toast","className","styles","e","preventDefault","autoComplete","required","value","message","pattern","type","minLength","maxLength","validate","password_confirm","Pulsar","color","onClick"],"sourceRoot":""}