{"version":3,"file":"static/js/546.5c040425.chunk.js","mappings":"sRACA,G,QAAuB,4B,6BCgGvB,MAxFA,WACE,OAKIA,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAEF,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAC0BC,GAAaC,EAAAA,EAAAA,KAA/BC,iBAER,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eAEMC,EAAQ,mCAAG,8FAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,OAAf,SAEbR,GAAc,GAFD,gBAGUC,QAHV,IAGUA,OAHV,EAGUA,EAAUQ,MAC/B,SAAAC,GAAI,OAAQ,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMH,KAAKI,iBAAkBJ,EAAKI,aAAtC,IAJO,yCAOXC,EAAAA,GAAAA,MAAA,kBAAuBL,EAAvB,sBAPW,2CAUPF,EAAW,CAAEE,KAAAA,EAAMC,OAAAA,IAVZ,QAWbI,EAAAA,GAAAA,QAAA,kBAAyBL,EAAzB,oBACAV,IAZa,kDAcbe,EAAAA,GAAAA,MAAY,8BACZC,QAAQC,IAAI,aAAZ,MAfa,yBAiBbd,GAAc,GAjBD,6EAAH,sDAqBd,OACE,kBACEe,UAAWC,EACXV,SAAU,SAAAW,GAAC,OAAIA,EAAEC,gBAAN,EACXC,aAAa,MAHf,WAKE,qCAEE,4BACM1B,EAAS,OAAQ,CACnB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MACE,yHACFC,QACE,kEAIP3B,EAAOY,OAAQ,cAAGQ,UAAU,QAAb,SAAsBpB,EAAOY,KAAKe,cAEpD,uCAEE,4BACM7B,EAAS,SAAU,CACrB2B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MACE,6EACFC,QACE,oGAIP3B,EAAOa,SAAU,cAAGO,UAAU,QAAb,SAAsBpB,EAAOa,OAAOc,aAEvDvB,IAAc,SAACyB,EAAA,EAAD,CAAQC,MAAM,aAC7B,oBACEC,KAAK,SACLC,QAASjC,EAAaY,GACtBsB,SAAU7B,EAHZ,WAKE,2CACA,sBAIP,C,mGC1FYG,EAAsB,WACjC,IAAcD,GAAa4B,EAAAA,EAAAA,MAAnBC,KACFC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAY3B,MAAO,CAAE9B,kBAVgB+B,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EACrC,wBACEjC,QADF,IACEA,OADF,EACEA,EACI8B,QAAO,SAAAI,GACP,OAAOA,EAAQ5B,KAAKI,cAAcyB,SAASL,EAAOpB,cACnD,IACA0B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/B,KAAKiC,cAAcD,EAAEhC,KAAjC,WALV,QAKqD,EAEtD,GAAE,CAACwB,EAAQ9B,IAEeA,SAAAA,EAC5B,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/index.module.scss?56c9","components/ContactsForm/index.js","hooks/useFilteredContacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__mz54l\"};","import { useForm } from 'react-hook-form';\nimport { toast } from 'react-toastify';\nimport { useAddContactMutation } from 'services/contacts';\nimport { useFilteredContacts } from 'hooks/useFilteredContacts';\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './index.module.scss';\nimport { Pulsar } from '@uiball/loaders';\nimport { useState } from 'react';\n\nfunction ContactForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n  const [isLoadData, setIsLoadData] = useState(false);\n  const { filteredContacts: contacts } = useFilteredContacts();\n\n  const [addContact] = useAddContactMutation();\n\n  const onSubmit = async ({ name, number }) => {\n    try {\n      setIsLoadData(true);\n      const response = await contacts?.find(\n        item => item?.name.toLowerCase() === name.toLowerCase()\n      );\n      if (response) {\n        toast.error(`Contact ${name} is already exist`);\n        return;\n      }\n      await addContact({ name, number });\n      toast.success(`Contact ${name} has been added`);\n      reset();\n    } catch (error) {\n      toast.error('Oops! Something went wrong');\n      console.log('error :>> ', error);\n    } finally {\n      setIsLoadData(false);\n    }\n  };\n\n  return (\n    <form\n      className={styles.form}\n      onSubmit={e => e.preventDefault()}\n      autoComplete=\"off\"\n    >\n      <label>\n        Name\n        <input\n          {...register('name', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value:\n                /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              message:\n                'Name may contain only letters, apostrophe, dash and spaces',\n            },\n          })}\n        />\n        {errors.name && <p className=\"error\">{errors.name.message}</p>}\n      </label>\n      <label>\n        Number\n        <input\n          {...register('number', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value:\n                /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              message:\n                'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n            },\n          })}\n        />\n        {errors.number && <p className=\"error\">{errors.number.message}</p>}\n      </label>\n      {isLoadData && <Pulsar color=\"#5c6386\" />}\n      <button\n        type=\"submit\"\n        onClick={handleSubmit(onSubmit)}\n        disabled={isLoadData}\n      >\n        <span>Add contact</span>\n        <i></i>\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useGetContactsQuery } from 'services/contacts';\nimport { getFilter } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nexport const useFilteredContacts = () => {\n  const { data: contacts } = useGetContactsQuery();\n  const filter = useSelector(getFilter);\n\n  const filteredContacts = useMemo(() => {\n    return (\n      contacts\n        ?.filter(contact => {\n          return contact.name.toLowerCase().includes(filter.toLowerCase());\n        })\n        .sort((a, b) => a.name.localeCompare(b.name)) ?? []\n    );\n  }, [filter, contacts]);\n\n  return { filteredContacts, contacts };\n};\n"],"names":["useForm","register","handleSubmit","errors","formState","reset","useState","isLoadData","setIsLoadData","contacts","useFilteredContacts","filteredContacts","useAddContactMutation","addContact","onSubmit","name","number","find","item","toLowerCase","toast","console","log","className","styles","e","preventDefault","autoComplete","required","value","message","pattern","Pulsar","color","type","onClick","disabled","useGetContactsQuery","data","filter","useSelector","getFilter","useMemo","contact","includes","sort","a","b","localeCompare"],"sourceRoot":""}