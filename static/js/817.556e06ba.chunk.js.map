{"version":3,"file":"static/js/817.556e06ba.chunk.js","mappings":"gSACA,EAAuB,gCAAvB,EAA+D,iC,SCMhD,SAASA,IACtB,OAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAGF,GAA6BC,EAAAA,EAAAA,MAA7B,eAAOC,EAAP,KAAgBC,EAAhB,KAAgBA,QAChBC,QAAQC,IAAIF,GACZ,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,mCAAG,sGAASC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAhB,SAGLV,EAAM,CAAES,MAAAA,EAAOC,SAAAA,IAHV,2BAEbC,KAAQC,EAFK,EAELA,KAAMC,EAFD,EAECA,MAFD,SAITT,GAASU,EAAAA,EAAAA,IAAO,CAAEF,KAAAA,EAAMC,MAAAA,KAJf,OAKfP,EAAS,aACTR,IANe,4CAAH,sDASd,OACE,kBACEiB,UAAWC,EACXR,SAAU,SAAAS,GAAC,OAAIA,EAAEC,gBAAN,EACXC,aAAa,MAHf,WAKE,uCAEE,4BACMzB,EAAS,QAAS,CACpB0B,SAAU,CACRC,OAAO,EACPC,QAAS,0BAEXC,QAAS,CACPF,MACE,wEACFC,QAAS,gCAId1B,EAAOa,QAAS,cAAGM,UAAWC,EAAd,SAA6BpB,EAAOa,MAAMa,cAG7D,0CAEE,0BACEE,KAAK,YACD9B,EAAS,WAAY,CACvB0B,SAAU,yBACVK,UAAW,CACTJ,MAAO,EACPC,QAAS,0CAEXI,UAAW,CACTL,MAAO,GACPC,QAAS,0CAEXC,QAAS,CACPF,MAAO,2CACPC,QACE,wFAIP1B,EAAOc,WACN,cAAGK,UAAWC,EAAd,SAA6BpB,EAAOc,SAASY,cAIjD,mBAAQE,KAAK,SAASG,QAAShC,EAAaa,GAA5C,sBAKL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/AuthorizationForm/index.module.scss?2c62","pages/AuthorizationForm/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthorizationForm_form__V1KOV\",\"error\":\"AuthorizationForm_error__R9wNw\"};","import { useForm } from 'react-hook-form';\nimport { useLoginMutation } from 'services/auth';\nimport { useDispatch } from 'react-redux';\nimport { signIn } from 'redux/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport styles from './index.module.scss';\n\nexport default function AuthForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n\n  const [login, { loading }] = useLoginMutation();\n  console.log(loading);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onSubmit = async ({ email, password }) => {\n    const {\n      data: { user, token },\n    } = await login({ email, password });\n    await dispatch(signIn({ user, token }));\n    navigate('/contacts');\n    reset();\n  };\n\n  return (\n    <form\n      className={styles.form}\n      onSubmit={e => e.preventDefault()}\n      autoComplete=\"off\"\n    >\n      <label>\n        Email*\n        <input\n          {...register('email', {\n            required: {\n              value: true,\n              message: 'This field is required',\n            },\n            pattern: {\n              value:\n                /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n              message: 'Please enter valid email',\n            },\n          })}\n        />\n        {errors.email && <p className={styles.error}>{errors.email.message}</p>}\n      </label>\n\n      <label>\n        Password*\n        <input\n          type=\"password\"\n          {...register('password', {\n            required: 'This field is required',\n            minLength: {\n              value: 7,\n              message: 'Password must be at least 7 characters',\n            },\n            maxLength: {\n              value: 12,\n              message: 'Password must be at most 12 characters',\n            },\n            pattern: {\n              value: /^(?=.*d)(?=.*[a-z])(?=.*[A-Z])(?!.*s).*$/,\n              message:\n                'Password must contain at least one digit, one lowercase and one uppercase letter',\n            },\n          })}\n        />\n        {errors.password && (\n          <p className={styles.error}>{errors.password.message}</p>\n        )}\n      </label>\n\n      <button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n        Submit\n      </button>\n    </form>\n  );\n}\n"],"names":["AuthForm","useForm","register","handleSubmit","errors","formState","reset","useLoginMutation","login","loading","console","log","dispatch","useDispatch","navigate","useNavigate","onSubmit","email","password","data","user","token","signIn","className","styles","e","preventDefault","autoComplete","required","value","message","pattern","type","minLength","maxLength","onClick"],"sourceRoot":""}