{"version":3,"file":"static/js/546.035292bd.chunk.js","mappings":"qOACA,EAAuB,2BAAvB,EAA0D,4BAA1D,EAA8F,4BAA9F,EAAmI,6B,6BC4EnI,MAtEA,WACE,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MAAsBC,KACvCC,QAAQC,IAAI,gBAAiBJ,GAC7B,OAAqBK,EAAAA,EAAAA,MAAdC,GAAP,eAEMC,GAAsBC,EAAAA,EAAAA,MACtBC,GAAuBD,EAAAA,EAAAA,MAEvBE,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACD,SAATjB,EACFC,EAAQgB,GACU,UAATjB,GACTG,EAASc,EAAMC,WAElB,EAcD,OACE,kBAAMC,UAAWC,EAAaC,SAbX,SAAAN,GACnBA,EAAEO,iBACElB,EAASmB,MAAK,SAAAC,GAAI,OAAIA,EAAKxB,KAAKyB,gBAAkBzB,EAAKyB,aAArC,IACpBC,EAAAA,GAAAA,MAAA,kBAAuB1B,EAAvB,uBAGFU,EAAW,CAAEV,KAAAA,EAAM2B,OAAQzB,IAC3BwB,EAAAA,GAAAA,QAAA,kBAAyB1B,EAAzB,oBACAC,EAAQ,IACRE,EAAS,IACV,EAGC,WACE,kBAAOgB,UAAWC,EAAcQ,QAASjB,EAAzC,oBAGA,kBACEQ,UAAWC,EACXS,KAAK,OACL7B,KAAK,OACLiB,MAAOjB,EACP8B,SAAUhB,EACViB,GAAIpB,EACJqB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,kBAAOf,UAAWC,EAAcQ,QAASf,EAAzC,sBAGA,kBACEM,UAAWC,EACXS,KAAK,OACL7B,KAAK,QACLiB,MAAOf,EACP4B,SAAUhB,EACViB,GAAIlB,EACJmB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,oBAAQf,UAAWC,EAAeS,KAAK,SAAvC,WACE,2CACA,sBAIP,C,wDC1ED,IAkBIjB,EAAS,WAGX,IAH0B,IAAduB,EAAc,uDAAP,GACfJ,EAAK,GACLK,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfJ,GADES,EAAO,GACHA,EAAKtB,SAAS,IACXsB,EAAO,IACTA,EAAO,IAAItB,SAAS,IAAIuB,cACtBD,EAAO,GACV,IAEA,GAET,CACD,OAAOT,CACR,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/index.module.scss?56c9","components/ContactsForm/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__mz54l\",\"input\":\"ContactsForm_input__DCfrk\",\"label\":\"ContactsForm_label__5uduS\",\"button\":\"ContactsForm_button__8e8N0\"};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { nanoid } from 'nanoid';\nimport styles from './index.module.scss';\nimport { useGetContactsQuery, useAddContactMutation } from 'services/contacts';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useGetContactsQuery().data;\n  console.log('contacts :>> ', contacts);\n  const [addContact] = useAddContactMutation();\n\n  const nameInputIdGenerate = nanoid();\n  const phoneInputIdGenerate = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'phone') {\n      setPhone(value.toString());\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.find(item => item.name.toLowerCase() === name.toLowerCase())) {\n      toast.error(`Contact ${name} is already exist`);\n      return;\n    }\n    addContact({ name, number: phone });\n    toast.success(`Contact ${name} has been added`);\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label} htmlFor={nameInputIdGenerate}>\n        Name:\n      </label>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        id={nameInputIdGenerate}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label className={styles.label} htmlFor={phoneInputIdGenerate}>\n        Number:\n      </label>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"phone\"\n        value={phone}\n        onChange={handleChange}\n        id={phoneInputIdGenerate}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={styles.button} type=\"submit\">\n        <span>add contact</span>\n        <i></i>\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","name","setName","phone","setPhone","contacts","useGetContactsQuery","data","console","log","useAddContactMutation","addContact","nameInputIdGenerate","nanoid","phoneInputIdGenerate","handleChange","e","target","value","toString","className","styles","onSubmit","preventDefault","find","item","toLowerCase","toast","number","htmlFor","type","onChange","id","pattern","title","required","size","bytes","crypto","getRandomValues","Uint8Array","byte","toUpperCase"],"sourceRoot":""}